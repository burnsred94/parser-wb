import { Action, Ctx, Message, On, Start, Update, Use } from 'nestjs-telegraf';

import { Action as ActionState, StatusUserBot, TelegrafContext } from './interfaces/telegraf-context.interfaces';
import { InitializerService } from './modules/initializer/initializer.service';
import { UserService } from './modules/user/user.service';
import { AuthService } from './modules/auth/auth.service';
import { StatsService } from './modules/stats/stats.service';
import { SessionsService } from './modules/sessions/sessions.service';
import { Session } from './modules/sessions/schemas/sessions.schema';
import { CopywritingService } from './modules/sessions/schemas/copywrite-data.schema';
import { ValidatorService } from './modules/validator/validator.service';
import { SessionStats } from './modules/sessions/schemas/sessions-stats.schema';
import { LoginSession } from './modules/sessions/schemas/session-login.schema';
import { Cron, CronExpression } from '@nestjs/schedule';
import { ConfigService } from '@nestjs/config';
import { Telegram } from 'telegraf';
import * as path from 'path';
import * as fs from 'fs';




@Update()
export class AppService {
  date = `${new Date().getFullYear()}-${new Date().getMonth() + 1}-${new Date().getDate()}`
  copywriting = new CopywritingService().createCopywritingSession()
  configService: ConfigService
  bot: Telegram


  constructor(
    private readonly initializerService: InitializerService,
    private readonly userService: UserService,
    private readonly authService: AuthService,
    private readonly statsService: StatsService,
    private readonly sessionService: SessionsService,
    private readonly validatorService: ValidatorService,
  ) {
    this.configService = new ConfigService();
    this.bot = new Telegram(this.configService.get('TOKEN_DEV_TELEGRAM'));
  }

  @Use()
  async middleware(ctx: TelegrafContext, next: () => Promise<void>) {
    await next();
  }

  @Action('start')
  @Start()
  async start(@Ctx() ctx: TelegrafContext) {
    const { id, username } = ctx.message ? ctx.message.from : ctx.callbackQuery.from

    const users = await this.userService.findAll()
    console.log(users)

    const findUserTelegram = await this.userService.findByTelegramId(id);

    await this.statsService.stats({ start_bot: 1 })

    if (findUserTelegram) {
      const findSessionTelegram = await this.sessionService.findOne(id);

      if (findSessionTelegram?.date === this.date && findSessionTelegram !== null) {
        await this.sessionService.findOneAndUpdate(id, {
          copywriting_data: this.copywriting,
        })

        const init = await this.initializerService.initStartKeyboard(findSessionTelegram.statusUser)

        if (init) {
          await ctx.reply(init.caption, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: init.keyboard.reply_markup.inline_keyboard,
            },

          })
        }

      } else if (findSessionTelegram?.date !== this.date && findSessionTelegram !== null) {
        const session = new Session(id, findUserTelegram);

        findSessionTelegram ?
          await this.sessionService.delete(id) && await this.sessionService.createSession(session) :
          await this.sessionService.createSession(session)

        const init = await this.initializerService.initStartKeyboard(findSessionTelegram.statusUser)

        if (init) {
          await ctx.reply(init.caption, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: init.keyboard.reply_markup.inline_keyboard,
            },

          })
        }

      } else {
        const session = new Session(id, findUserTelegram);

        const newSession = await this.sessionService.createSession(session);

        const init = await this.initializerService.initStartKeyboard(newSession.statusUser)
        await this.userService.findByTelegramUserUpdateTelegramId(username, { telegramUserId: id, generateSymbol: 1500 })

        if (init) {
          await ctx.reply(init.caption, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: init.keyboard.reply_markup.inline_keyboard,
            },

          })
        }
      }


    } else {
      const user = await this.userService.create({ telegramUserId: id, telegramUser: username });

      const session = new Session(id, user)
      const sessionInDb = await this.sessionService.createSession(session);

      const init = await this.initializerService.initStartKeyboard(sessionInDb.statusUser);

      if (init) {
        await ctx.replyWithPhoto({ source: init.img }, {
          caption: init.caption,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: init.keyboard.reply_markup.inline_keyboard
          }
        });
      }

    }

  }



  @On('message')
  async getMessage(@Message('text') message: string, @Ctx() ctx: TelegrafContext) {
    const { id, username } = ctx.message.from

    const findSessionTelegram = await this.sessionService.findOne(id);

    if (findSessionTelegram.state === ActionState.REGISTER) {
      try {
        await this.validatorService.validateTypesString(message);
        await this.validatorService.validateEmail(message);

        const newRegister = await this.authService.register(message, id)

        if (newRegister) {
          const state = { statusUser: StatusUserBot.REGISTERED_BOT };

          await this.sessionService.updateOne(id, state)


          const init = await this.initializerService.initStartKeyboard(state.statusUser);

          if (init) {
            await this.statsService.stats({ success_registration: 1 })

            const stat = new SessionStats().getNewStatsSession({
              ...findSessionTelegram.stats,
              success_registration: 1
            })

            await this.sessionService.updateStats(id, stat)
            await this.sessionService.updateOne(id, { state: ActionState.REGISTER_SUCCESS })

            await ctx.replyWithPhoto({ source: init.img }, {
              caption: `${init.caption}\n\n<b>–í–∞—à–∞ –ø–æ—á—Ç–∞:</b>\n${newRegister.email}\n\n<b>–í–∞—à –ø–∞—Ä–æ–ª—å:</b>\n${newRegister.pass}`,
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: init.keyboard.reply_markup.inline_keyboard
              }
            });
          }
        }

      } catch (e) {
        console.log(e)
        await ctx.reply(`<i>${e.message}</i>`, {
          parse_mode: 'HTML', reply_markup: {
            inline_keyboard: [
              [{ text: "üìã –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é", callback_data: "start" }]
            ]
          }
        });
      }
    }

    if (findSessionTelegram.state === ActionState.LOGIN) {
      try {
        if (!findSessionTelegram.login.tickEmail) {
          await this.validatorService.validateTypesString(message);
          await this.validatorService.validateEmail(message);

          const setEmail = new LoginSession().updateLoginSessionDate({
            ...findSessionTelegram.login,
            email: message,
            tickEmail: true
          });

          await this.sessionService.updateLogin(id, setEmail);
          await ctx.reply('–í–∞—à –ø–∞—Ä–æ–ª—å üëá')
        }

        if (!findSessionTelegram.login.tickPassword && findSessionTelegram.login.tickEmail) {
          await this.validatorService.validateTypesString(message);
          const setPassword = new LoginSession().updateLoginSessionDate({
            ...findSessionTelegram.login,
            password: message,
            tickPassword: true,
            isLogin: true
          });
          await this.sessionService.updateLogin(id, setPassword);

          await this.authService.authLogin(username, {
            email: findSessionTelegram.login.email,
            password: message,
            telegramUserId: id
          })

          await this.sessionService.updateOne(id, {
            confirmed: true,
            statusUser: StatusUserBot.REGISTER_BOT_SITE
          })

          await this.statsService.stats({ authorization: 1 })

          const defaultSession = new LoginSession().createDataSetLogin();
          await this.sessionService.updateLogin(id, defaultSession);

          const init = await this.initializerService.initStartKeyboard(StatusUserBot.REGISTER_BOT_SITE);

          await ctx.reply(init.caption, init.keyboard)
        }

      } catch (e) {
        await ctx.reply(`<i>${e.message}</i>`, {
          parse_mode: 'HTML', reply_markup: {
            inline_keyboard: [
              [{ text: "üìã –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é", callback_data: "start" }]
            ]
          }
        });
        const findSessionTelegram = await this.sessionService.findOne(id);

        if (findSessionTelegram.login.isLogin) {
          const defaultSession = new LoginSession().createDataSetLogin();
          await this.sessionService.updateLogin(id, defaultSession);

          const state = { state: ActionState.DEFAULT }
          await this.sessionService.updateOne(id, state)
        }
      }
    }

    if (findSessionTelegram.state === ActionState.AI_COPYWRITER) {
      try {
        await this.validatorService.validateTypesString(message);

        const defaultSession = new CopywritingService().createCopywritingSession();
        await this.sessionService.updateCopywriterData(id, defaultSession);


        if (!findSessionTelegram.copywriting_data.tickName) {
          const dataSetCopywriting = new CopywritingService().setCopywritingSession({
            ...findSessionTelegram.copywriting_data,
            name: message,
            tickName: true
          })

          await this.sessionService.updateOne(id, {
            copywriting_data: dataSetCopywriting

          })

          if (findSessionTelegram.stats.start_generation_button === 0) {
            const updateStats = new SessionStats().getNewStatsSession({
              ...findSessionTelegram.stats,
              start_generation_button: 1
            })

            await this.sessionService.updateStats(id, updateStats);

            await this.statsService.stats({ start_generation_button: 1 })
          } else {
            await this.statsService.updateStats({ regenerate_button: 1 })
          }


          await ctx.reply('<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n <i>–Ω–∞–ø—Ä–∏–º–µ—Ä "\–¥–ª—è –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö, –¥–µ–º–∏—Å–µ–∑–æ–Ω–Ω–∞—è, —á–µ—Ä–Ω–∞—è\"</i>', {
            parse_mode: 'HTML',
          })

        }

        if (!findSessionTelegram.copywriting_data.tickDescription && findSessionTelegram.copywriting_data.tickName) {
          const dataSetCopywriting = new CopywritingService().setCopywritingSession({
            ...findSessionTelegram.copywriting_data,
            description: message,
            tickDescription: true,
          })

          await this.sessionService.updateOne(id, {
            copywriting_data: dataSetCopywriting
          })

          await ctx.reply('<b>–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n\n<i>—Ü–≤–µ—Ç - –∂–µ–ª—Ç—ã–π, —Ä–∞–∑–º–µ—Ä - s, m, l, xl, –∑–∞—Å—Ç–µ–∂–∫–∞ - –º–æ–ª–Ω–∏—è, —Å—Ç–∏–ª—å–Ω–∞—è –∏ —è—Ä–∫–∞—è</i>', {
            parse_mode: 'HTML',
          })

        }

        if (
          findSessionTelegram.copywriting_data.tickDescription &&
          findSessionTelegram.copywriting_data.tickName &&
          !findSessionTelegram.copywriting_data.tickKeywords
        ) {
          const dataSetCopywriting = new CopywritingService().setCopywritingSession({
            ...findSessionTelegram.copywriting_data,
            keywords: message,
            tickKeywords: true,
          })

          await this.sessionService.updateOne(id, {
            copywriting_data: dataSetCopywriting
          })

          await ctx.reply('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–µ –≤—Ä–µ–º—è... ü§ûüèΩ')
          const response = await this.initializerService.getAiDataBot(findSessionTelegram.copywriting_data, findSessionTelegram.userId);

          if (response) {
            await ctx.reply(response)

            const init = await this.initializerService.initKeyboard(ActionState.AI_COPYWRITER, id)
            await ctx.reply(init.message, init.keyboard);
          }

        }
      } catch (e) {

      }
    }

  }

  @Cron(CronExpression.EVERY_12_HOURS, { timeZone: 'Europe/Moscow' })
  async event() {
    const users = await this.userService.findAll();

    const link = path.join(__dirname, '../public/photo_2023-03-22_17-18-36.jpg')
    const sourceImg = fs.createReadStream(link)

    users.map(async (user) => {
      await this.bot.sendPhoto(user.telegramUserId, { source: sourceImg }, {
        caption: `<b>üî•–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüî•</b>\n\n–í—ã —É—Å–ø–µ–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ 30 000 –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –í–ë. –ò —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –æ–±–ª–µ–≥—á–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –£ –Ω–∞—Å –¥–ª—è –≤–∞—Å –æ—Å–æ–±–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µü§´\n\nüéÅ –ü–æ–ª—É—á–∏—Ç–µ –ü–û–õ–ù–´–ô –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 5000 –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ –≤—Å–µ–≥–æ –∑–∞ 1000 RUB –Ω–∞ 3 –º–µ—Å—è—Ü–∞! üéÅ\n\n‚è≥ –ê–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 30 –º–∞—Ä—Ç–∞!`,
        parse_mode: 'HTML'
      });
      await this.bot.sendMessage(user.telegramUserId, `–° –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ:\n\n‚úÖ –°—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π, –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–±—É—á–µ–Ω–Ω–æ–º—É –±–æ—Ç—É.\n‚úÖ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏ –ø—Ä–æ–¥–∞–∂–∏ —Å –ø–æ–º–æ—â—å—é SEO-—Ç–µ–∫—Å—Ç–æ–≤. –ò–ò-–±–æ—Ç –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–µ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑.\n‚úÖ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –±–∏–∑–Ω–µ—Å–∞, –ø–æ–∫–∞ –±–æ—Ç –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç—ã.\n\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ @JayPr0  –ø–æ–º–µ—Ç–∫–æ–π –õ–û–Ø–õ–¨–ù–´–ô2023`)
      await this.bot.sendMessage(user.telegramUserId, `üéâ–ê –µ—â—ë —É –Ω–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Åüéâ\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 50 000 —Å–∏–º–≤–æ–ª–æ–≤? –ù–∞–ø–∏—à–∏—Ç–µ @JayPr0, —É–¥–µ–ª–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å –∏ –º—ã –ø–æ–ø–æ–ª–Ω–∏–º –í–∞—à –±–∞–ª–∞–Ω—Å!\n\n–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤—ã–≥–æ–¥–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç—å –ò–ò-–±–æ—Ç –Ω–∞ –ø–æ–ª–Ω—É—é –∫–∞—Ç—É—à–∫—É! üöÄ\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–∫–æ–º–∞–Ω–¥–∞ –ò–ò-–±–æ—Ç–∞`)
    })
  }



}
