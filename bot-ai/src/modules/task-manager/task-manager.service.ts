import { ConfigService } from '@nestjs/config';
// import { Cron } from '@nestjs/schedule';
import { Update } from 'nestjs-telegraf';
import { Telegram } from 'telegraf';

// export class TaskManager {
//     constructor(
//         private readonly bot: Telegram,
//         private readonly userId: number
//     ) {
//     }

//     @Cron('* * * * * ')
//     async messageEmailRegister() {
//         console.log('messageEmailRegister');
//     }

//     @Cron('* * * * *')
//     async Event() {
//         console.log('messageEmailUpdate');
//     }
// }

// export class TaskManagerService {
//     bot: Telegram;
//     configService: ConfigService
//     userId: number;



//     constructor() {
//         this.configService = new ConfigService();
//         this.bot = new Telegram(this.configService.get('TOKEN_DEV_TELEGRAM'));
//     }

//     fabric(userId: number): TaskManager {
//         return new TaskManager(this.bot, userId);
//     }
// }

import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { Subject } from 'rxjs';
import { UserService } from '../user/user.service';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class TaskManagerService {
    bot: Telegram;
    configService: ConfigService

    constructor(private readonly userService: UserService) {
        this.configService = new ConfigService();
        this.bot = new Telegram(this.configService.get('TOKEN_PROD_TELEGRAM'));
    }



    // @Cron(CronExpression.EVERY_10_SECONDS, { timeZone: 'Europe/Moscow' })
    // async event() {
    //     const users = await this.userService.findAll();

    //     const link = path.join(__dirname, '../../../public/photo_2023-03-22_17-18-36.jpg')
    //     const sourceImg = fs.createReadStream(link)
    //     console.log(link)
    //     users.map(async (user) => {
    //        await this.bot.sendPhoto(user.telegramUserId, {source: sourceImg},{
    //         caption: `<b>üî•–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüî•</b>\n\n–í—ã —É—Å–ø–µ–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞, –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ 30 000 –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –í–ë. –ò —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –æ–±–ª–µ–≥—á–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –£ –Ω–∞—Å –¥–ª—è –≤–∞—Å –æ—Å–æ–±–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µü§´\n\nüéÅ –ü–æ–ª—É—á–∏—Ç–µ –ü–û–õ–ù–´–ô –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 5000 –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ –≤—Å–µ–≥–æ –∑–∞ 1000 RUB –Ω–∞ 3 –º–µ—Å—è—Ü–∞! üéÅ\n\n‚è≥ –ê–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 27 –º–∞—Ä—Ç–∞!`,
    //         parse_mode: 'HTML'
    //     });
    //        await this.bot.sendMessage(user.telegramUserId, `–° –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ:\n\n‚úÖ –°—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π, –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–±—É—á–µ–Ω–Ω–æ–º—É –±–æ—Ç—É.\n‚úÖ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏ –ø—Ä–æ–¥–∞–∂–∏ —Å –ø–æ–º–æ—â—å—é SEO-—Ç–µ–∫—Å—Ç–æ–≤. –ò–ò-–±–æ—Ç –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–µ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑.\n‚úÖ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –±–∏–∑–Ω–µ—Å–∞, –ø–æ–∫–∞ –±–æ—Ç –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç—ã.\n\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ @JayPr0  –ø–æ–º–µ—Ç–∫–æ–π –õ–û–Ø–õ–¨–ù–´–ô2023`)
    //        await this.bot.sendMessage(user.telegramUserId, `üéâ–ê –µ—â—ë —É –Ω–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Åüéâ\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 50 000 —Å–∏–º–≤–æ–ª–æ–≤? –ù–∞–ø–∏—à–∏—Ç–µ @JayPr0, —É–¥–µ–ª–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å –∏ –º—ã –ø–æ–ø–æ–ª–Ω–∏–º –í–∞—à –±–∞–ª–∞–Ω—Å!\n\n–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤—ã–≥–æ–¥–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç—å –ò–ò-–±–æ—Ç –Ω–∞ –ø–æ–ª–Ω—É—é –∫–∞—Ç—É—à–∫—É! üöÄ\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–∫–æ–º–∞–Ω–¥–∞ –ò–ò-–±–æ—Ç–∞`)
    //     })
    // }
}