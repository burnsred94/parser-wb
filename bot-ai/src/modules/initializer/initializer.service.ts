import { BadRequestException, Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Action, StatusUserBot, TelegrafContext } from 'src/interfaces/telegraf-context.interfaces';
import { AuthService } from '../auth/auth.service';
import { UserService } from '../user/user.service';
import { IRegisterInit } from './interfaces/register-init.interfaces';
import { keyboardsInit } from './utils/keyboards';
import axios, { AxiosError, AxiosResponse } from 'axios';
import * as path from 'path';
import * as fs from 'fs';
import { CopywritingData } from '../sessions/schemas/interfaces/sessions.interfacs';

@Injectable()
export class InitializerService {
    constructor(
        private readonly authService: AuthService,
        private readonly userService: UserService,
        private readonly configService: ConfigService
    ) { }

    // async registerInit(ctx: TelegrafContext): Promise<IRegisterInit> {
    //     const message = ctx.message;
    //     const { text } = <{ text: string }>message;

    //     if (text.match(EMAIL_REGEXP)) {
    //         const dataRegister = await this.authService.register(ctx.update)
    //         if (dataRegister.type === 'error') {
    //             return {
    //                 message: '–¢—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ —É –Ω–∞—Å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ï—Å–ª–∏ –£ —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
    //                 state: Action.DEFAULT
    //             }
    //         } else {
    //             ctx.session.statusUser = StatusUserBot['REGISTERED_BOT'];

    //             return {
    //                 message: `üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—é –ø–æ—á—Ç—É.\n\n–¢–≤–æ–π –ø–æ—á—Ç–∞: ${text}\n–ü–∞—Ä–æ–ª—å: <b>${dataRegister.pass}</b>\n\n–ù–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã: 
    //                       `,
    //                 state: Action.REGISTER_SUCCESS
    //             }
    //         }
    //     } else {
    //         return {
    //             message: 'Ops ü§• –Ω–∞–≤–µ—Ä–Ω–æ–µ —Ç—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ üòû',
    //             state: Action.REGISTER
    //         }
    //     }
    // }

    async confirmInit(ctx: TelegrafContext) {
        const { username } = <{ username: string }>ctx.message.chat;
        const { first_name } = ctx.message.from

        return keyboardsInit(ctx.session.statusUser, first_name)
    }

    async getUserToApi(telegramName: string) {
        const api_url = await this.configService.get('API_URL')
        const user = await axios.post(`${api_url}/verify/tg`, { tg: `https://t.me/${telegramName}` });
        const { data } = user.data;
        if (data) {
            return true;
        } else {
            return false;
        }
    }

    async getAiDataBot(data: CopywritingData, id) {
        const url_ai = await this.configService.get('API_AI_BOT')

        const response = await axios.post(`${url_ai}`, {
            data: {
                product_name: data.name,
                short_description: data.description,
                keywords: data.keywords
            }
        }).catch((err: AxiosError) => {
            throw new BadRequestException('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        }).then((res: AxiosResponse) => {
            this.userService.updateGenerateSymbols(id, res.data.text.length)
            return res.data.text
        })

        return response
    }

    async initStartKeyboard(status: StatusUserBot) {
        try {
            if (status == StatusUserBot.NOT_REGISTERED) {

                const link = path.join(__dirname, '..', '..', '..', '/public/Ad_Banner.png');
                const sourceImg = fs.createReadStream(link)

                return {
                    img: sourceImg,
                    caption: `–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–µ <b>AI-–∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–∞</b> –æ—Ç <a href="https://sellershub.ru/?utm_medium=smm&utm_source=tg&utm_campaign=bot_ai&utm_term=bot_button&utm_content=1">Sellershub.ru</a>\n\n–°–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç <b>–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</b> –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è SEO-—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ <b>–∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à–∏ –∫–ª—é—á–∏</b> –¥–ª—è —Ç–æ–≤–∞—Ä–∞.\n\n–ú—ã –æ–±—É—á–∞–µ–º –Ω–∞—à—É –º–æ–¥–µ–ª—å –Ω–∞ –±–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.`,
                    keyboard: {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: "üìë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data: 'register' }, { text: "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data: 'login' }],
                                [{ text: "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: 'support' }],
                                [{ text: "üí¨ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã", callback_data: 'chats_and_chanels' }]
                            ]
                        }
                    }
                }

            } else if (status == StatusUserBot.REGISTERED_BOT) {
                const link = path.join(__dirname, '..', '..', '..', '/public/Registration_success.png');
                const sourceImg = fs.createReadStream(link)

                return {
                    img: sourceImg,
                    caption: `–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–∞–º –∏ —É—Å–ª—É–≥–∞–º`,
                    keyboard: {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: "üîê AI - –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä ", callback_data: 'not_access' }],
                                [{ text: "üîê  –î—Ä—É–≥–∏–µ –°–µ—Ä–≤–∏—Å—ã ", callback_data: 'not_access' }],
                                [{ text: "üí¨ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã", callback_data: 'chats_and_chanels' }],
                                [{ text: "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: 'support' }],
                                [{ text: "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data: 'login' }],
                                [{ text: "üö™üö∂ –í—ã–π—Ç–∏", callback_data: 'logout' }]
                            ]
                        }
                    }
                }
            } else if (status == StatusUserBot.REGISTER_BOT_SITE) {
                return {
                    caption: `1Ô∏è‚É£ –í 93% —Å–ª—É—á–∞–µ–≤ –±–æ—Ç –ø–∏—à–µ—Ç –∫–æ–Ω–µ—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–π –ø—Ä–∞–≤–æ–∫, —Ç–æ–≥–¥–∞ –∫–∞–∫ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –ª–∏—à—å –∫–∞–∂–¥–æ–µ —Ç—Ä–µ—Ç—å–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –æ —á—ë–º —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n2Ô∏è‚É£ –°–∞–º–æ–æ–±—É—á–∞–µ–º–æ—Å—Ç—å –Ω–∞ –±–∞–∑–µ –Ω–∞ 30.000+ —Ç–æ–≤–∞—Ä–æ–≤ WB –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –æ—Ç–ª–∏—á–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–ª—é—á–∏. –ü–æ—ç—Ç–æ–º—É –æ–Ω —É–ª—É—á—à–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ SEO –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.\n\n3Ô∏è‚É£ –ù–∞—à –ê–ò-–±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: –±–ª–∞–≥–æ–¥–∞—Ä—è –µ–≥–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –≤–∞–º –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n4Ô∏è‚É£ –ù–∞—à –±–æ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN, –∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –°–ù–ì –Ω–µ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ë–æ–ª–µ–µ —Ç–æ–≥–æ, –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: —á–µ—Ä–µ–∑ –Æ–º–∞–Ω–∏, –¢–∏–Ω—å–∫–æ—Ñ—Ñ –∏–ª–∏ –°–±–µ—Ä.\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –ê–ò-–±–æ—Ç–æ–º —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞! üöÄ`,
                    keyboard: {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: "ü§ñ AI - –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä", callback_data: 'copywriter' }],
                                [{ text: "üìü –î—Ä—É–≥–∏–µ –°–µ—Ä–≤–∏—Å—ã", callback_data: 'services' }],
                                [{ text: "üí¨ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã", callback_data: 'chats_and_chanels' }],
                                [{ text: "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: 'support' }],
                                [{ text: "üö™üö∂ –í—ã–π—Ç–∏", callback_data: 'logout' }]
                            ]
                        },
                    }
                }
            }

        } catch (error) {
            console.log(error)
        }

    }

    async initKeyboard(action: Action, id?: number) {
        const symbols = await this.userService.findByTelegramId(id)

        switch (action) {
            case Action.AI_COPYWRITER: {
                return {
                    message: `–•–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ?\n\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–∏—Ä–∞—Ü–∏–∏ ${symbols.generateSymbol < 0 ? 0 : symbols.generateSymbol}`,
                    keyboard: {
                        reply_markup: {
                            inline_keyboard: [
                                [symbols.generateSymbol > 0 ? { text: "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ ü§ñ", callback_data: 'copywriter' } : { text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å üíä', url: 'https://t.me/evgeniy_sellershub_ru' }, { text: "–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É AI ‚≠ê", callback_data: 'review' }],
                                [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data: 'start' }]
                            ]
                        }
                    }
                }
            }
            case Action.REVIEW: {

            }
        }
    }

}
