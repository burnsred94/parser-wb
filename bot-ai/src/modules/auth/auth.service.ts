import { Injectable, BadRequestException } from '@nestjs/common';
import axios, { AxiosError } from 'axios';
import { ConfigService } from '@nestjs/config';
import { randomUUID } from 'crypto';
import { UserService } from '../user/user.service';
import { StatusUserBot } from 'src/interfaces/telegraf-context.interfaces';
import { User } from '../user/schemas/user.schema';
import { Login } from '../sessions/schemas/interfaces/sessions.interfacs';


@Injectable()
export class AuthService {

    constructor(
        private readonly configService: ConfigService,
        private readonly userService: UserService
    ) { }

    async register(data: string, id: number) {
        const passGenerate = randomUUID()
        const api_url = await this.configService.get('API_URL');
        const pass = passGenerate.split('-')[0];

        await axios.post(`${api_url}/auth/local/register`, {
            "email": data,
            "username": data,
            "password": pass,
            "registered_from_url": "/telegram-ai-bot"
        },
            {
                headers: {
                    "Content-Type": "application/json"
                }
            }
        ).catch((error: AxiosError) => {
            if (error.response.status === 500) {
                throw new BadRequestException("–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ <b>SellersHub</b> –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ù\n\n–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—Ç—å—Å—è")
            }
        }).then(async () => {
            await this.userService.updateUser(id, {email: data})

        });

        return {
            pass: pass,
            email: data
        }
    }

    async authLogin(id: number,data: Partial<Login>) {

        const api_url = await this.configService.get('API_URL');

        await axios.post(`${api_url}/auth/local`, {
            identifier: data.email,
            password: data.password,
        }).catch((error: AxiosError) => {
            if (error.response.status === 500 || error.response.status === 400) {
                throw new BadRequestException("–ü—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ <b>SellersHub</b> –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ù\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:\n‚õî–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞\n‚õî–í—ã —É –Ω–∞—Å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n‚õî–í–∞—à–∞ –ø–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            }
        }).then(async (res) => {
            console.log(res)
            await this.userService.updateUser(id,{
                email: data.email,
                confirmed: true,
            })
        })

    }



}


